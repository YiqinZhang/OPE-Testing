name: UI Test
on:
  push:
    branches:
      - "container-base-ope"

env:
  REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}

jobs:
  Setup-and-Build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code #loads repo into action
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install Dependencies
        run: |
          pip install -r requirements/requirements.txt

      - name: Build
        run: |
          set -e  # Exit immediately if any command fail
          start=$(date +%s) #start the timer
          timeout 50m time make build
          end=$(date +%s) #end timer
          seconds=$((end-start))  #calc build time in sec
          elapsed=$(echo "scale=2; ($end - $start) / 60.0" | bc) #get time in min with dec
          min=${elapsed%.*}  #extract min part
          sec_cut=${elapsed#*.} #get the decimal
          sec_round="${sec_cut:0:1}.${sec_cut:1}"
          sec=$(echo "$sec_round * 6" | bc -l) #calc secs
          echo "$(min)m$(sec)s" > ./time.txt #send to file for use in diff run
          IMAGE=$(docker images --format "{{.Repository}}:{{.Tag}}" | head -n 1) #get built image
          echo "Image = $IMAGE"
          echo $IMAGE > ./image.txt

      - name: Push Beta Version
        run: |
          IMAGE=$(docker images --format "{{.Repository}}:{{.Tag}}" | head -n 1)
          docker run  -d --name stable $IMAGE
          REGISTRY=$(cat base/ope_book_registry)
          REGISTRY_USER=$(cat base/ope_registry_user)
          echo $REGISTRY $REGISTRY_USER
          docker login $REGISTRY -u $REGISTRY_USER -p $REGISTRY_PASSWORD
          TIME=$(cat time.txt)
          SIZE=$(docker images --format "{{.Size}}" | head -n 1)
          make push TIME="$TIME" SIZE="$SIZE"
          docker stop stable

      - name: Upload Image
        uses: actions/upload-artifact@v3
        with:
          name: image
          path: |
            image.txt

      - name: Upload Time
        uses: actions/upload-artifact@v3
        with:
          name: time
          path: |
            time.txt

            
  JupyterNB-Test:
    needs: Setup-and-Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Pull Image
        run: |
          make pull-beta

      - name: Run Container
        run: |
          IMAGE=$(docker images --format "{{.Repository}}:{{.Tag}}" | head -n 1)
          docker run -d -p 8888:8888 --name stable -v /test.ipynb:/home/jovyan/work $IMAGE
          container_id=$(docker ps -qf "name=stable" | head -n 1)
          docker cp tests/test.ipynb $container_id:/home/jovyan/work #mount test nb into container

      - name: Wait for Container Start
        run: |
          until docker exec stable jupyter lab --version; do sleep 1; done #start JupyterLab in notebook and wait until its up

      - name: Execute Notebook
        run: |
          container_id=$(docker ps -qf "name=stable" | head -n 1)
          docker exec $container_id jupyter lab --generate-config
          docker exec $container_id sh -c "echo 'c.NotebookApp.token = \"\"' >> /home/jovyan/.jupyter/jupyter_notebook_config.py" #create it without a token
          docker exec $container_id jupyter labextension install @jupyter-widgets/jupyterlab-manager #install widgets
          docker exec $container_id pip install nbclient
          docker exec $container_id pip install nbconvert
          docker exec $container_id jupyter lab build --minimize=False
          docker exec $container_id jupyter execute /home/jovyan/work/test.ipynb #if import fails import error will be triggered here
          echo "************SUCCESS***********"
          docker stop stable

  UI-Test:
    runs-on: ubuntu-latest
    needs: Setup-and-Build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setting up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install Chromium
        run: |
          #sudo apt-get update
          sudo apt-get install -y chromium-browser
          sudo apt-get upgrade chromium-browser

      - name: Install Necessary Python Packages
        run: |
          python -m pip install --upgrade pip
          pip install -r tests/requirements.txt
          pip install --upgrade selenium
          pip install --upgrade webdriver_manager
          chromedriver --version

      - name: Pull beta-version
        run: |
          make pull-beta

      - name: Run JupyterLab Inside Container
        run: |
          make run-beta &
          sleep 3

      - name: Run RISE Extension Test
        run: |
          sleep 5
          make -C tests rise-test #this triggers both testing of rise functionality & recording of screenshots

      - name: Run Screenshots Difference Test
        run: |
          sleep 5
          make -C tests screenshots-test #this just runs screenshot difference
